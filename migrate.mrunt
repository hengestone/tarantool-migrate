-- migrate.mrunt
package.path = "?.lua;" .. package.path
migrator = require "tarantool-migrate"
inspect = require "inspect"

initdb = (runt) ->
  dbconfig = runt.config.db
  runt.logger\debug(inspect(dbconfig))
  m = migrator(dbconfig, runt.logger)
  if m.err
    runt.logger\fatal("Unable to connect to database: #{m.err}")
    return false, m.err
  m

tasks =
  all:
    depends: nil
    task: (spec, args, runt) ->
      runt.logger\debug(spec)
      m = initdb(runt)
      m\migrate_dir(runt.config.migrations.dir or "migrate")
    done: nil

  one:
    depends: nil
    task: (spec, args, runt) ->
      runt.logger\debug(spec)
      m = initdb(runt)
      m\migrate_dir(runt.config.migrations.dir or "migrate", true)
    done: nil

  revert:
    depends: nil
    task: (spec, args, runt) ->
      runt.logger\debug(spec)
      m = initdb(runt)
      m\revert("migrate")
    done: nil

  list:
    depends: nil
    task: (spec, args, runt) ->
      runt.logger\debug(spec)
      m = initdb(runt)
      migdata, err = m\list()
      if err
        runt.logger\fatal(error)
      else
        for i, mi in ipairs(migdata)
          print("#{mi[2]}: #{mi[1]}")
    done: nil

  list_files:
    depends: nil
    task: (spec, args, runt) ->
      runt.logger\debug(spec)
      m = initdb(runt)
      files, err = m\list_files(runt.config.migrations.dir or "migrate")
      if not err
        for i, fname in ipairs(files)
          print fname
    done: nil

tasks.default = tasks.all
tasks